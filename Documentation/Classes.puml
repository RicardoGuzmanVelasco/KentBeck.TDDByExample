@startuml

interface MoneyExpression
{
    Reduce(Bank bank, string to) : Money
} 
MoneyExpression ..> Bank

class Money <<ValueObject>>
{
    -Amount : int
    +Currency : string
    
    #Money(int amount, string currency)
    
    Times(int amount) : Money
    Plus(Money addend) : SumExpression
    
    {static} Dollar(int amount) : Money
    {static} Franc(int amount) : Money
}
Money --|> MoneyExpression
Money --> SumExpression

class SumExpression
{
    +Augend : Money
    +Addend : Money
}
SumExpression --|> MoneyExpression

class CurrencyPair <<ValueObject>>
{
    +fromCurrency : string
    +toCurrency : string
}

class Bank
{
    -rates : Dictionary<CurrencyPair, int>

    Reduce(MoneyExpression source, string to) : Money
    AddRate(string from, string to, int rate)
    Rate(string from, string to): int
}
Bank --> CurrencyPair
Bank ..> MoneyExpression
Bank --> Money
@enduml